[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PsychoPy Training 1",
    "section": "",
    "text": "This is training in PsychoPy, for the July 2022 cohort, w/c 11th July 2022.\nLast compiled Sunday 03 July 2022 at 04:54:42"
  },
  {
    "objectID": "cats-dogs.html",
    "href": "cats-dogs.html",
    "title": "1  Cats and Dogs",
    "section": "",
    "text": "In this chapter we create a simple experiment, bit by bit, with instructions, stimuli, and responses, where the stimuli are pictures of dogs and cats, and the task is to identify whether the current trial’s animal is a dog or a cat using the keyboard to press ‘c’ for cat or ‘d’ for dog."
  },
  {
    "objectID": "cats-dogs.html#instructions-routine",
    "href": "cats-dogs.html#instructions-routine",
    "title": "1  Cats and Dogs",
    "section": "1.1 Instructions Routine",
    "text": "1.1 Instructions Routine\nWe start with a blank psyexp1\nWe then add:\n\ninstructions to the participant about the task and which buttons to press - including an instruction to press space to continue.\na keyboard component so the participant can press space to continue\n\nDuring the course, I will show you live in PsychoPy while sharing my screen how to build this up. This website is intended to be used for reference after the course though, so I include a screencast of me building this up in Figure 1.1 below.\n\n\n\n\n\n\n\nTip\n\n\n\nAll the screencasts in this document can be viewed full-screen using the standard YouTube-style controls in the bottom-right:\n\n\n\n\n\n\nFigure 1.1: How to add instructions to the participant and let them press space to continue\n\n\n\nDuring the course, you should reproduce this partial experiment on your own machine. The best advice is to build it up bit by bit yourself. However I will include links to download partial experiments and complete experiments every now and then in this document. See for example the blue box below. The links will be to zip files which you must extract properly before opening: in Windows right-click on the zip file and do “extract all”, then use the folder that appears without the ‘.zip’ file extension\n\n\n\n\n\n\nDownload\n\n\n\nClick file1 to download the psyexp so far. Notice that these files have fullscreen unticked: you should change this by ticking the fullscreen box for real experiments. I’m only unticking fullscreen so that my screencast software can see the window.\n\n\nFigure 1.2 is a screencast of PsychoPy running this (partial) experiment on my machine.\n\n\n\n\nFigure 1.2: Runtime"
  },
  {
    "objectID": "cats-dogs.html#trial-procedure",
    "href": "cats-dogs.html#trial-procedure",
    "title": "1  Cats and Dogs",
    "section": "1.2 Trial Procedure",
    "text": "1.2 Trial Procedure\nWe now deal with what happens after they press ‘space’ to continue past the instructions screen.\nOn each trial we want to present one of our animal images for some duration during which the participant has the chance to type a response. If they don’t respond in time, we want the trial to time out, to encourage quick responses. Let’s say we want the duration to be one second, so it’s: “display the image for one second then take it off the screen, and they can only respond while the image is on screen.”\nWe want to record the RT and evaluate the response for correctness.\nWe want to add feedback saying “CORRECT!” in green ink, or “WRONG!” in red ink, or “RESPOND FASTER!” in black ink if they timed out.\nThen we’ll have an inter-trial interval of one second, then start the next trial.2 We’ll run ten trials, and use 5 cats and 5 dogs."
  },
  {
    "objectID": "cats-dogs.html#trial-sequence",
    "href": "cats-dogs.html#trial-sequence",
    "title": "1  Cats and Dogs",
    "section": "1.3 Trial Sequence",
    "text": "1.3 Trial Sequence\nIn PsychoPy, you use a spreadsheet to define the trials of your experiment. The convention is that each row of the spreadsheet after the header row corresponds to a single trial. So to plan a sequence of 10 trials we need a spreadsheet with 10 rows after the header row.3.\nIf the rows represent trials, how should we think about the columns? Each column is an opportunity to pass in some property of that trial. In our cats and dogs experiment, each trial is going to need an image of a cat or dog. So we make a column called, say, “animal_image”4 which will hold the filename for the image you want to show on that trial – so the first row of “animal_image” might contain “cat1.jpg” and the second “dog1.jpg” and so on for ten rows.\nWe also have the opportunity to use the trial sequence spreadsheet to have a column saying, for each trial, what the correct answer is based on which kind of image is being presented in the same row / trial. See the column ‘expected_answer’ in Figure 1.3 that contains ‘c’ on rows where a cat is presented and ‘d’ on rows where a dog is presented.\n\n\n\n\n\n\n\nFigure 1.3: Trial Sequence File (click to view bigger)\n\n\n\n\nIf we do supply the expected answer like this, then, since everything we put in the input spreadsheet is available to the code at runtime, we can say things like the following to evaluate the response for accuracy:\n\nif response.keys:\n  if response.keys == expected_answer:\n    feedback.text=\"CORRECT!\"\n    feedback.text=\"green\"\n  if response_keys != expected_answer:\n    feedback.text=\"WRONG!\"\n    feedback.text=\"red\"\nelse:\n  feedback.text=\"Timeout - please respond faster!\"\n  feedback.text=\"black\""
  },
  {
    "objectID": "cats-dogs.html#stimulus-files",
    "href": "cats-dogs.html#stimulus-files",
    "title": "1  Cats and Dogs",
    "section": "1.4 Stimulus Files",
    "text": "1.4 Stimulus Files\nWe need to track down images of 5 cats and 5 dogs, and then name them according to the scheme in Figure 1.3\n\n\n\n\n\n\nDownload\n\n\n\nClick stimuli to download the cats and dogs pictures"
  },
  {
    "objectID": "cats-dogs.html#making-the-trial-loop",
    "href": "cats-dogs.html#making-the-trial-loop",
    "title": "1  Cats and Dogs",
    "section": "1.5 Making the trial loop",
    "text": "1.5 Making the trial loop\nSee Figure 1.4 for:\n\nadd trials Routine\n\nadd image\n\nset duration (1.0 seconds)\nuse $animal_image for image.Image field and change drop-down from constant to set every repeat\n\nadd keyboard\n\nset allowed_keys field to 'c','d'\nset duration to 1.0 seconds - now they won’t be able to respond after the image disappears. The keyboard’s start and stop times are the same as the image’s\n\nenclose with loop\n\nThe Conditions field is where you put the name of the spreadsheet\nleave ‘random’ - the default - but notice that sequential is also available\nchange the default from 5 to 1 (because we only want to run the ten trials once)\n\n\n\n\n\n\n\nFigure 1.4: Making the trial loop\n\n\n\nSee Figure 1.5 for the runtime as things stand now.\n\n\n\n\nFigure 1.5: Running the basic loop\n\n\n\n\n\n\n\n\n\nDownload\n\n\n\nClick file2 to download the psyexp in a crude but working state."
  },
  {
    "objectID": "cats-dogs.html#finessing-the-trial-loop",
    "href": "cats-dogs.html#finessing-the-trial-loop",
    "title": "1  Cats and Dogs",
    "section": "1.6 Finessing the Trial Loop",
    "text": "1.6 Finessing the Trial Loop\nAt this stage things are basically working - the trial sequence is being randomised correctly; the images come up for the right amount of time; etc.\nHowever we can improve some things quite easily going into the file3.psyexp\n\nadd an inter-trial interval (0.5 seconds)\nset the images to be prepared during the inter-trial interval (better stimulus duration consistency)\ngive the components names that will help us understand better what they do when we see them later in results files\nmake the stimulus duration longer (the images were going by without responses because the duration was too short) - try 1.5 seconds.\nset the aspect ratio on the images to the original for the pictures to avoid the squashed look.\n\nFigure 1.6 shows how to do this finessing.\n\n\n\n\nFigure 1.6: Finessing the trial loop\n\n\n\nFigure 1.7 shows the runtime now after a little finessing.\n\n\n\n\nFigure 1.7: Finessing the trial loop - runtime\n\n\n\n\n\n\n\n\n\nDownload\n\n\n\nClick file3 to download the file3 psyexp as it stands after a little finessing."
  },
  {
    "objectID": "cats-dogs.html#sec-kbcorrectness",
    "href": "cats-dogs.html#sec-kbcorrectness",
    "title": "1  Cats and Dogs",
    "section": "1.7 Handling the keyboard response",
    "text": "1.7 Handling the keyboard response\nThe keyboard component has 3 attributes. They are named using the name of the keyboard component (which is key_resp by default).\n\nkey_resp.keys: a list of the allowed keys that were pressed while the keyboard component was listening for key-presses. Usually this list only has one member, but it’s possible to collect multiple key-presses.\nkey_resp.rt: simply RT, in seconds, i.e., how long the keyboard component was active for until an allowed key was pressed\nkey_resp.corr: accuracy coded 0 or 1, but it only exists in cases where you have requested it using the Store Correct tick-box of the keyboard component in the data tab, and only then if you also supply the correct response in the Correct answer field (see screenshot)\n\n\n\n\nIn our file3.psyexp, we have supplied the correct answer on each trial in the column of the input spreadsheet called $expected_answer. If we then tick Store correct for the keyboard component in the stimulus presentation Routine, and fill out the field Correct answer, PsychoPy will create a variable response.corr that holds the accuracy on that trial as 0 or 1, and it will write that variable as a a column in the results file, with an entry on each row that was a trial.\nFigure 1.8 shows how to set up the keyboard to record accuracy.\n\n\n\n\nFigure 1.8: Set up the keyboard to record accuracy\n\n\n\nFigure 1.9 shows what it looks like in the results file after enabling accuracy recording.\n\n\n\n\n\nFigure 1.9: Results file showing variables from the keyboard response"
  },
  {
    "objectID": "cats-dogs.html#feedback",
    "href": "cats-dogs.html#feedback",
    "title": "1  Cats and Dogs",
    "section": "1.8 Feedback",
    "text": "1.8 Feedback\nThere are several ways to implement feedback in PsychoPy for stimulus-response experiments like our cats and dogs example. What they have in common is that they all assume that the response.corr variable that we looked at in Section 1.7 is available.\nOne style is to present the participant with text indicating whether they respond correctly or not for each trial.\nWithin that style there is more than one way to implement the feedback in PsychoPy.\n\nMethod 1: One way is to insert a feedback Routine after the Trial Routine that contains a single Text Component whose contents and colour are set to variables whose values we calculate using a Code component, based on the value of response.corr. See Figure 1.10 for a screencast of writing this method., and see Figure 1.11 for the runtime. This is file5.psyexp.\n\n\n\n\n\nFigure 1.10: Feedback using a single text component and passing variables in for text content and text colour\n\n\n\n\n\n\n\nFigure 1.11: Feedback using a single text component and passing variables in for text content and text colour (runtime)\n\n\n\n\nMethod 2: Another way is to insert the Feedback Routine after the Trial Routine, in the same way, but this time to create a Text component for each of the possible outcomes of the trial - normally correct and incorrect but also sometimes time-out. We then select one single outcome to display with reference to the value of response.corr. This is file6.psyexp.\n\n\n\n\n\nFigure 1.12: Feedback using multiple text components, one for each outcome, with fixed content and colour, and then supplying as the Start value not a time but a condition\n\n\n\n\n\n\n\nFigure 1.13: Feedback using multiple text components, one for each outcome, with fixed content and colour, and then supplying as the Start value not a time but a condition (runtime)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Peirce, Jonathan, Rebecca Hirst, and Michael MacAskill. 2022.\nBuilding Experiments in PsychoPy. Sage."
  },
  {
    "objectID": "authoring-tools.html",
    "href": "authoring-tools.html",
    "title": "Appendix A — authoring tools",
    "section": "",
    "text": "There are five types of callouts:\n\nnote; warning; important; tip; caution.\n\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout-note.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a callout-warning.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is a callout-important.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis is a callout-tip.\n\n\n\n\n\n\n\n\nDanger\n\n\n\nThis is a callout-caution that actually says danger\n\n\nYou can issue a second-level header inside the callout to edit the text content at the top of the box in the coloured bit: here the header is hash hash Tip Your Waiter, and Tip Your Waiter is considered to be a caption\n\n\n\n\n\n\nTip Your Waiter\n\n\n\nThis is an example of a callout with a caption.\n\n\nYou can imitate rmarkdown’s code=‘hide’ approach to get boxes of text that reveal on being clicked - in quarto jargon this is collapse done by adding the chunk option collapse=\"true\" to get collapsed until clicked\n\n\n\n\n\n\nClick to reveal the answer\n\n\n\n\n\nThe answer is 42\n\n\n\nor collapse=\"false\" to get expanded until dismissed.\n\n\n\n\n\n\nClick to hide the code\n\n\n\n\n\nThis code gets rolled up when you click"
  },
  {
    "objectID": "authoring-tools.html#citations",
    "href": "authoring-tools.html#citations",
    "title": "Appendix A — authoring tools",
    "section": "A.2 Citations",
    "text": "A.2 Citations\nHere’s an example of quarto citation syntax:\n“Have a look in the PsychoPy textbook (Peirce, Hirst, and MacAskill 2022, 34–35) for more information.”"
  },
  {
    "objectID": "authoring-tools.html#sec-crossref",
    "href": "authoring-tools.html#sec-crossref",
    "title": "Appendix A — authoring tools",
    "section": "A.3 Cross-references",
    "text": "A.3 Cross-references\nThis is how you do a cross-reference - see Section A.3."
  },
  {
    "objectID": "authoring-tools.html#definition-lists",
    "href": "authoring-tools.html#definition-lists",
    "title": "Appendix A — authoring tools",
    "section": "A.4 Definition Lists",
    "text": "A.4 Definition Lists\n\nTerm 1\n\nDefinition 1\n\nTerm 2\n\nDefinition 2a\n\n\nDefinition 2b"
  },
  {
    "objectID": "authoring-tools.html#margin-note",
    "href": "authoring-tools.html#margin-note",
    "title": "Appendix A — authoring tools",
    "section": "A.5 Margin Note",
    "text": "A.5 Margin Note\n\n\nThis is a margin note"
  },
  {
    "objectID": "authoring-tools.html#footnotes",
    "href": "authoring-tools.html#footnotes",
    "title": "Appendix A — authoring tools",
    "section": "A.6 Footnotes",
    "text": "A.6 Footnotes\nThis shows how to use a footnote1\n\n\n\n\nPeirce, Jonathan, Rebecca Hirst, and Michael MacAskill. 2022. Building Experiments in PsychoPy. Sage."
  }
]