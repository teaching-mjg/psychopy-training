[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PsychoPy Training",
    "section": "",
    "text": "This is training in PsychoPy, for the July 2022 cohort, w/c 11th July 2022.\nLast compiled Saturday 09 July 2022 at 16:31:04"
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Part I Getting Started",
    "section": "",
    "text": "Explain the 3 windows that open up when you start PsychoPy:\n\nBuilder\nCoder\nRunner\n\nExplain Builder interface:\n\nRoutines\nComponents"
  },
  {
    "objectID": "the-interface.html",
    "href": "the-interface.html",
    "title": "1  The interface",
    "section": "",
    "text": "Here we take a look around the interface.\nThe interface has 3 Windows"
  },
  {
    "objectID": "the-interface.html#builder",
    "href": "the-interface.html#builder",
    "title": "1  The interface",
    "section": "1.1 Builder",
    "text": "1.1 Builder\nThe Builder is where you assemble an experiment. It is the main window."
  },
  {
    "objectID": "the-interface.html#runner",
    "href": "the-interface.html#runner",
    "title": "1  The interface",
    "section": "1.2 Runner",
    "text": "1.2 Runner\nThe Runner has 3 parts:\n\na list of experiments (typically just the one you are working with at the moment, but can be several)\na panel for alerts (can draw your attention to problems with your experiment)\na panel called stdout stands for standard out and gives very detailed messages that can help you to fix (debug) your experiment.\n\nYou should try to arrange this window so that you can easily read it."
  },
  {
    "objectID": "the-interface.html#coder",
    "href": "the-interface.html#coder",
    "title": "1  The interface",
    "section": "1.3 Coder",
    "text": "1.3 Coder\nThe Coder is for advanced use and you don’t usually need it open. You can close it."
  },
  {
    "objectID": "the-builder.html",
    "href": "the-builder.html",
    "title": "2  The Builder",
    "section": "",
    "text": "Here we look in more depth at the Builder window."
  },
  {
    "objectID": "the-builder.html#components",
    "href": "the-builder.html#components",
    "title": "2  The Builder",
    "section": "2.2 Components",
    "text": "2.2 Components\nTop right in the Builder - in yellow in the figure.\nThe Components panel lists all the available components of an experiment: broadly speaking, stimuli and responses, so things like Text; Image; Keyboard; Mouse; Slider. Also includes some components that are only needed for specific kinds of experiment like eye-tracking or EEG."
  },
  {
    "objectID": "the-builder.html#routines",
    "href": "the-builder.html#routines",
    "title": "2  The Builder",
    "section": "2.3 Routines",
    "text": "2.3 Routines\nTop left in the Builder - in green in the figure.\nTo start with, the Routines panel shows the trial Routine and its timeline. There aren’t any components in the trial Routine yet, so it looks a bit empty.\nYou build up an experiment by adding Components to the Routines panel. To add a Component to a Routine, click on the relevant Component."
  },
  {
    "objectID": "the-builder.html#flow",
    "href": "the-builder.html#flow",
    "title": "2  The Builder",
    "section": "2.1 Flow",
    "text": "2.1 Flow\nBottom in the Builder - in blue in the figure.\nTo start with the Flow panel shows only a time-course and a single Routine named trial.\nYou build up an experiment by adding Routines to the Flow. Before the trial Routine, you probably want to put a Instructions Routine, for example. To add a Routine to the Flow, click on Insert Routine."
  },
  {
    "objectID": "hello-world.html",
    "href": "hello-world.html",
    "title": "3  Hello World",
    "section": "",
    "text": "“Hello World” is the name of the first program you write when learning any programming language. You can think of PsychoPy as a visual programming language.\n“Hello World” is really simple. It just puts the text Hello World! on the screen, waits, takes it away, and ends.\nAlthough it is simple, once you can do Hello World, you know enough to do much more complicated things, so it’s a good starting point.\nWe’ll look at how to do Hello World in 3 different ways.\nThe first thing to do is to save the experiment file."
  },
  {
    "objectID": "hello-world.html#text-component",
    "href": "hello-world.html#text-component",
    "title": "3  Hello World",
    "section": "3.1 Text component",
    "text": "3.1 Text component\n\n\n\nFocus the Builder window by clicking in it. Click on the Text Component in Favourites in the Components panel to bring up options for adding text to your experiment - Figure 3.1.\n\n\n\n\n\n\nFigure 3.1: Add a text Component\n\n\n\n\n\n\n\n\n\nFor now, just edit the contents of the “Text” box. Delete the existing text and replace with `Hello World!“. Press OK. See that the Text Component is now added in Routines in Figure 3.2. Save the experiment now, and every time you change something.\n\n\n\n\n\n\nFigure 3.2: Text Component in the Routines panel\n\n\n\n\n\n\n\n\n\nThis is now a simple but fully-functioning experiment that you can run. If you do this now, your experiment will run in a full-screen window. This is what you want for a real experiment, but while you are building your experiment, it’s better to run in a non-fullscreen window.\n\n\n\n\n\n\nFigure 3.3: Settings menu\n\n\n\n\n\n\n\n\nClick the cog wheel in Figure 3.3. This brings up the box in Figure 3.4.\nGo to the “Screen” tab\nUntick “Full-screen window”\nChange “Window Size” to [1280, 720]. This preserves the shape of a full screen window to help you lay things out so they look the same when the experiment runs for real.\n\n\n\n\n\n\n\nFigure 3.4: Setting to run in non-fullscreen window\n\n\n\n\n\n\n\n\n\nThere are several different kinds of run button that we will explain later. For now use the one in Figure 3.5.\n\n\n\n\n\n\nFigure 3.5: There are several different kinds of run button - use this one\n\n\n\n\n\n\n\n\n\nIf things are working, you’ll see the process captured in the screencast in Figure 3.6. This also illustrates how I suggest you lay out the Runner and Builder windows.\n\n\n\n\n\nVideo\nFigure 3.6: Video screencast of a running hello world"
  },
  {
    "objectID": "hello-world.html#image-component",
    "href": "hello-world.html#image-component",
    "title": "3  Hello World",
    "section": "3.2 Image component",
    "text": "3.2 Image component\nThe same principles that applied to doing Hello World using a Text Component also apply for the method that uses an Image Component.\nStart with a new experiment: File -> New\nSave it into a folder of its own, maybe hello-world-image.\n\n\n\nNow you need an image of the words “Hello World!”. You can make one in Paint, or Powerpoint; or you can grab this one in Figure 3.7. Save it in the same folder as your experiment, under the name stimulus.png\n\n\n\n\n\n\nFigure 3.7: Image of hello world text\n\n\n\n\n\n\n\n\n\nFrom the Components panel, choose an Image Component. In the box that opens up, in the Image field, write the name of the image file, stimulus.png as in Figure 3.8.\n\n\n\n\n\n\nFigure 3.8: Enter the image name\n\n\n\n\n\n\n\n\n\nHave a look at the Layout tab too. Notice that by default, images are shown square: The Size [w, h] field is set to (0.5, 0.5). Our image is oblong so if we constrain it to be square it will look squashed. The actual dimensions of our image are (602, 164). That’s 3.67:1 as a ratio. If we want the image 0.5 wide, we need to divide 3.67 by (3.67/0.5) = 7.34, so, to maintain the aspect ratio we need to divide 1 by 7.34 too (1/7.34) = 0.136. Put in (0.5,0.136) for Size [w,h], and press OK (Figure 3.9).\n\n\n\n\n\n\nFigure 3.9: Correct the aspect ratio\n\n\n\n\n\n\nDon’t forget to save the experiment, then run it in the same way as for the Text Component version.\n\n\n\nHere’s what you should see:\n\n\n\n\n\nVideo\nFigure 3.10: Expected outcome"
  }
]